{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "%%html\n",
    "<style>\n",
    "div.input {\n",
    "    display:none;\n",
    "}\n",
    "<style>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "## Importing libraries and displaying the header\n",
    "\n",
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import ipywidgets as widgets \n",
    "from IPython.display import clear_output\n",
    "from ipywidgets import Layout\n",
    "import pandas as pd\n",
    "import pymysql.cursors\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import datasets, linear_model\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import warnings\n",
    "import seaborn as sns\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "import scikitplot as skplt\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import stats\n",
    "from sklearn.linear_model import BayesianRidge, LinearRegression\n",
    "\n",
    "style = {'description_width':'initial', 'font_weight': 'bold'}\n",
    "header=widgets.HTML(value=\"<font color=crimson><font size=5><b><u>Black Friday Project</font>\")\n",
    "display(header)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "\n",
    "graphs=widgets.Button(value=False, description='Click to see the exploratory data', \n",
    "                         layout = widgets.Layout(height='30px', width='40%',size='20'))\n",
    "display(graphs)\n",
    "def graphs_click(a):\n",
    "    connection = pymysql.connect(host='localhost',\n",
    "                             user='root',\n",
    "                             password='Pratik23n',\n",
    "                             db='black_friday',\n",
    "                             charset='utf8mb4',\n",
    "                             cursorclass=pymysql.cursors.DictCursor)\n",
    "    black_friday_data = pd.read_sql('SELECT * FROM black_friday_data', con=connection)\n",
    "#    black_friday_data.head()\n",
    "    feature_cols = ['Gender','Age', 'Occupation', 'City_Category','Stay_In_Current_City_Years',\n",
    "                'Marital_Status', 'Product_Category_1']\n",
    "\n",
    "    for i in feature_cols:\n",
    "        ax = sns.countplot(y=i, data=black_friday_data,label=i)\n",
    "        plt.title(i)\n",
    "        plt.show()\n",
    "    # Connect to the database\n",
    "    \n",
    "    df1 = pd.read_sql('SELECT a.*, b.Category as product_category FROM black_friday_data a left join product_categories b on a.Product_Category_1 = b.Product_Category_1', con=connection)\n",
    "    ax = sns.countplot(y='product_category', data=df1,label='product_category')\n",
    "    plt.title('Product_Category')\n",
    "    plt.show()    \n",
    " \n",
    "    connection = pymysql.connect(host='localhost',\n",
    "                             user='root',\n",
    "                             password='Pratik23n',\n",
    "                             db='black_friday',\n",
    "                             charset='utf8mb4',\n",
    "                             cursorclass=pymysql.cursors.DictCursor)\n",
    "#   black_friday_data = pd.read_sql('SELECT * FROM black_friday_data', con=connection)\n",
    "\n",
    "    feature_cols = ['Gender','Age', 'Occupation', 'City_Category','Stay_In_Current_City_Years',\n",
    "                'Marital_Status', 'Product_Category_1']\n",
    "\n",
    "    df1 = pd.read_sql('SELECT a.*, b.Category as product_category FROM black_friday_data a left join product_categories b on a.Product_Category_1 = b.Product_Category_1', con=connection)\n",
    "    df2 = pd.concat([df1[\"Purchase\"], df1['product_category']], axis=1)\n",
    "    fig = sns.boxplot(x=\"product_category\", y=\"Purchase\", data=df2)\n",
    "    fig.axis(ymin=0, ymax=30000);\n",
    "\n",
    "    \n",
    "    for i in feature_cols:\n",
    "#        data = pd.concat([black_friday_data[\"Purchase\"], black_friday_data[i]], axis=1)\n",
    "        f, ax = plt.subplots(figsize=(8, 6)) \n",
    "        data = pd.concat([black_friday_data[\"Purchase\"], black_friday_data[i]], axis=1)\n",
    "        fig = sns.boxplot(x=i, y=\"Purchase\", data=data)\n",
    "        fig.axis(ymin=0, ymax=30000);\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "graphs.on_click(graphs_click)    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "from sklearn.linear_model import BayesianRidge, LinearRegression\n",
    "\n",
    "style = {'description_width':'initial', 'font_weight': 'bold'}\n",
    "\n",
    "header=widgets.HTML(value=\"<font color=crimson><font size=5><b><u>Black Friday Project</font>\")\n",
    "#display(header)\n",
    "analysis_type = widgets.Dropdown(\n",
    "    options=['Classification_Problem', 'Regression_Problem'],\n",
    "    value='Classification_Problem',\n",
    "    description='Select analysis:',\n",
    "    disabled=False,\n",
    "    style=style\n",
    ") \n",
    "display(analysis_type)\n",
    "\n",
    "proceed_1 = widgets.Button(value=False, description='Click to select model', \n",
    "                         layout = widgets.Layout(height='30px', width='40%',size='20'))\n",
    "proceed_2 = widgets.Button(value=False, description='Click to select target variable', \n",
    "                         layout = widgets.Layout(height='30px', width='40%',size='20'))\n",
    "proceed_3 = widgets.Button(value=False, description='Run model', \n",
    "                         layout = widgets.Layout(height='30px', width='40%',size='20'))\n",
    "\n",
    "\n",
    "\n",
    "def class_prob_dropdown():\n",
    "    global label_value\n",
    "    label_value = widgets.Dropdown(description='Classification Models:', style = style, \n",
    "    options=['Logistic_Regression', 'Linear Discriminant Analysis', 'K nearest neighbours',\n",
    "             'Quadratic Discriminant Analysis', 'Decision_Tree'],\n",
    "    layout = widgets.Layout(height='30px', width='40%',size='20'))\n",
    "    display(label_value)\n",
    "\n",
    "    \n",
    "def regg_prob_dropdown():\n",
    "    global label_value\n",
    "    label_value = widgets.Dropdown(description='Regression Models:', style = style, \n",
    "    options=['Multiple_Linear_Regression', 'Ridge Regression'],\n",
    "    layout = widgets.Layout(height='30px', width='40%',size='20'))\n",
    "    display(label_value)\n",
    "    \n",
    "def class_target_var_selection():\n",
    "    global target_variable\n",
    "    target_variable = widgets.Dropdown(\n",
    "    options=['Gender'],\n",
    "    description='Select Target Variable:',\n",
    "    disabled=False,\n",
    "    style=style)\n",
    "    display(target_variable)\n",
    "    \n",
    "def regg_target_var_selection():\n",
    "    global target_variable\n",
    "    target_variable = widgets.Dropdown(\n",
    "    options=['Purchase'],\n",
    "    description='Select Target Variable:',\n",
    "    disabled=False,\n",
    "    style=style)\n",
    "    display(target_variable)  \n",
    "    \n",
    "       \n",
    "def proceed_1_click(a):\n",
    "    clear_output()\n",
    "    #analysis_value = analysis_type.value\n",
    "#    display(header)\n",
    "    display(analysis_type)\n",
    "    display(proceed_1)\n",
    "    if analysis_type.value == 'Classification_Problem':\n",
    "        class_prob_dropdown()\n",
    "        display(proceed_2)\n",
    "    elif analysis_type.value =='Regression_Problem':\n",
    "        regg_prob_dropdown()\n",
    "        display(proceed_2)\n",
    "    else:\n",
    "        print(\"wrong value\")\n",
    "        \n",
    "def proceed_2_click(b):\n",
    "    if analysis_type.value == 'Classification_Problem':\n",
    "        class_target_var_selection()\n",
    "        \n",
    "        \n",
    "    \n",
    "    elif analysis_type.value == 'Regression_Problem':\n",
    "        regg_target_var_selection()\n",
    "        \n",
    "        \n",
    "            \n",
    "    else:\n",
    "        print(\"wrong value\")\n",
    "    global age_group_radio_button\n",
    "    age_group_radio_button = widgets.RadioButtons(\n",
    "        options=['Broader_Category', 'Shorter_Category'],\n",
    "        description='Select age group:',\n",
    "        disabled=False,\n",
    "        style = style\n",
    "    )\n",
    "\n",
    "    descrip = widgets.HTML(\n",
    "        value='Youth, Working Class, Senior Citizen <br/> 0-17, 18-25, 26-35, 36-45, 46-50, 51-55, 55+ ',\n",
    "    )\n",
    "\n",
    "    \n",
    "    category= widgets.HBox(children=[age_group_radio_button,descrip\n",
    "                                ])\n",
    "  \n",
    "    display(category)\n",
    "    #display(broader)\n",
    "    #display(shorter)\n",
    "    display(proceed_3)\n",
    "    \n",
    "    \n",
    "def proceed_3_click(c):\n",
    "## running selected model on clicking this    \n",
    "    print(analysis_type.value)\n",
    "    print(label_value.value)\n",
    "    print(target_variable.value)\n",
    "    print(age_group_radio_button.value)\n",
    "    run_model()\n",
    "\n",
    "    \n",
    "    \n",
    "display(proceed_1)\n",
    "proceed_1.on_click(proceed_1_click)\n",
    "proceed_2.on_click(proceed_2_click)\n",
    "proceed_3.on_click(proceed_3_click)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "## function to run models\n",
    "\n",
    "def run_model():\n",
    "\n",
    "    connection = pymysql.connect(host='localhost',\n",
    "                             user='root',\n",
    "                             password='Pratik23n',\n",
    "                             db='black_friday',\n",
    "                             charset='utf8mb4',\n",
    "                             cursorclass=pymysql.cursors.DictCursor)\n",
    "\n",
    "    if age_group_radio_button.value == 'Shorter_Category':\n",
    "        df = pd.read_sql('SELECT * FROM black_friday_data', con=connection)\n",
    "    elif age_group_radio_button.value == 'Broader_Category':\n",
    "        df = pd.read_sql('SELECT a.*, b.Category as Age FROM black_friday_data a left join age_groups b on a.Age=b.Age', con=connection)\n",
    "\n",
    "    if label_value.value == 'Multiple_Linear_Regression':\n",
    "        msk = np.random.rand(len(df)) < 0.8\n",
    "        df_train = df[msk]\n",
    "        df_test = df[msk]\n",
    "        number = LabelEncoder()\n",
    "        df_train['Gender'] = number.fit_transform(df_train['Gender'].astype('str'))\n",
    "        df_test['Gender'] = number.fit_transform(df_test['Gender'].astype('str'))\n",
    "        df_train['Age'] = number.fit_transform(df_train['Age'].astype('str'))\n",
    "        df_train['City_Category'] = number.fit_transform(df_train['City_Category'].astype('str'))\n",
    "        df_train.keys()\n",
    "        df_train_x = df_train.drop(columns = 'Purchase')\n",
    "#        df_train_x = df_train.drop(columns = 'City_Category')        \n",
    "        df_train_y = df_train['Purchase']\n",
    "        df_test_x = df_test.drop(columns = 'Purchase')\n",
    "#        df_test_x = df_test.drop(columns = 'City_Category')        \n",
    "        df_test_y = df_test['Purchase']\n",
    "        regr = linear_model.LinearRegression()\n",
    "        regr.fit(df_train_x, df_train_y)\n",
    "        df_train_y_pred = regr.predict(df_test_x)\n",
    "    elif label_value.value == 'Logistic_Regression':\n",
    "        #logistic Regression model\n",
    "        #target variable y = 'Gender', and X are predictors\n",
    "        #  'Age',\n",
    "        X = df[['Occupation','Marital_Status',\n",
    "                               'Product_Category_1','Purchase']]\n",
    "        y = df.Gender\n",
    "        X_train, X_test, y_train, y_test = train_test_split(X, y)\n",
    "        clf = LogisticRegression()\n",
    "        clf.fit(X_train, y_train)\n",
    "        print(\"The test points are predicted as:\")\n",
    "        print(clf.predict(X_test[:10])) \n",
    "        print(\"Accuracy =\", accuracy_score(y_test, clf.predict(X_test)))\n",
    "\n",
    "        #precision-recall curves\n",
    "        probas = clf.predict_proba(X_test)\n",
    "        skplt.metrics.plot_precision_recall_curve(y_test, probas)\n",
    "        plt.show()\n",
    "    elif label_value.value == 'Decision_Tree':\n",
    "        #Decision Tree model\n",
    "        X = df[['Occupation','Marital_Status',\n",
    "                               'Product_Category_1','Purchase']]\n",
    "        y = df.Gender\n",
    "        X_train, X_test, y_train, y_test = train_test_split(X, y)\n",
    "        clf = DecisionTreeClassifier()\n",
    "        clf.fit(X_train, y_train)\n",
    "        print(\"The test points are predicted as:\")\n",
    "        print(clf.predict(X_test[:10])) \n",
    "        print(\"Accuracy =\", accuracy_score(y_test, clf.predict(X_test)))\n",
    "\n",
    "        probas = clf.predict_proba(X_test)\n",
    "        skplt.metrics.plot_precision_recall_curve(y_test, probas)\n",
    "        plt.show()\n",
    "    elif label_value.value == 'K nearest neighbours': \n",
    "        # KNN model\n",
    "        X = df[['Occupation','Marital_Status',\n",
    "                               'Product_Category_1','Purchase']]\n",
    "        y = df.Gender\n",
    "        X_train, X_test, y_train, y_test = train_test_split(X, y)        \n",
    "        clf = KNeighborsClassifier(n_neighbors=5)\n",
    "        clf.fit(X_train, y_train)\n",
    "        print(\"The test points are predicted as:\")        \n",
    "        print(clf.predict(X_test[:10])) \n",
    "        print(\"Accuracy =\", accuracy_score(y_test, clf.predict(X_test)))\n",
    "\n",
    "        probas = clf.predict_proba(X_test)\n",
    "        skplt.metrics.plot_precision_recall_curve(y_test, probas)\n",
    "        plt.show()\n",
    "    elif label_value.value == 'Linear Discriminant Analysis':\n",
    "        #LDA model\n",
    "        X = df[['Occupation','Marital_Status',\n",
    "                               'Product_Category_1','Purchase']]\n",
    "        y = df.Gender\n",
    "        X_train, X_test, y_train, y_test = train_test_split(X, y)                \n",
    "        clf = LinearDiscriminantAnalysis()\n",
    "        clf.fit(X_train, y_train)\n",
    "        print(\"The test points are predicted as:\")        \n",
    "        print(clf.predict(X_test[:10])) \n",
    "        print(\"Accuracy =\", accuracy_score(y_test, clf.predict(X_test)))\n",
    "\n",
    "        probas = clf.predict_proba(X_test)\n",
    "        skplt.metrics.plot_precision_recall_curve(y_test, probas)\n",
    "        plt.show()\n",
    "    elif label_value.value == 'Quadratic Discriminant Analysis':\n",
    "        #QDA model\n",
    "        X = df[['Occupation','Marital_Status',\n",
    "                               'Product_Category_1','Purchase']]\n",
    "        y = df.Gender\n",
    "        X_train, X_test, y_train, y_test = train_test_split(X, y)        \n",
    "        clf = LinearDiscriminantAnalysis()\n",
    "        clf.fit(X_train, y_train)\n",
    "        print(\"The test points are predicted as:\")        \n",
    "        print(clf.predict(X_test[:10])) \n",
    "        print(\"Accuracy =\", accuracy_score(y_test, clf.predict(X_test)))\n",
    "\n",
    "        probas = clf.predict_proba(X_test)\n",
    "        skplt.metrics.plot_precision_recall_curve(y_test, probas)\n",
    "        plt.show()\n",
    "    elif label_value.value == 'Ridge Regression': \n",
    "        print(\"hi bhos\")\n",
    "        msk = np.random.rand(len(df)) < 0.8\n",
    "        df_train = df[msk]\n",
    "        df_test = df[msk]\n",
    "        number = LabelEncoder()\n",
    "        df_train['Gender'] = number.fit_transform(df_train['Gender'].astype('str'))\n",
    "        df_test['Gender'] = number.fit_transform(df_test['Gender'].astype('str'))\n",
    "        df_train['Age'] = number.fit_transform(df_train['Age'].astype('str'))\n",
    "        df_train['City_Category'] = number.fit_transform(df_train['City_Category'].astype('str'))\n",
    "        df_train.keys()\n",
    "        df_train_x = df_train.drop(columns = 'Purchase')\n",
    "#        df_train_x = df_train.drop(columns = 'City_Category')        \n",
    "        df_train_y = df_train['Purchase']\n",
    "        df_test_x = df_test.drop(columns = 'Purchase')\n",
    "#        df_test_x = df_test.drop(columns = 'City_Category')        \n",
    "        df_test_y = df_test['Purchase']\n",
    "\n",
    "        clf = BayesianRidge(compute_score=True)\n",
    "        clf.fit(df_train_x, df_train_y)\n",
    "        n_samples, n_features = 429769, 7\n",
    "        lambda_ = 4.\n",
    "        w = np.zeros(n_features)\n",
    "        # Only keep 10 weights of interest\n",
    "        relevant_features = np.random.randint(0, n_features, 10)\n",
    "        for i in relevant_features:\n",
    "            w[i] = stats.norm.rvs(loc=0, scale=1. / np.sqrt(lambda_))\n",
    "        # Create noise with a precision alpha of 50.\n",
    "        alpha_ = 50.\n",
    "        noise = stats.norm.rvs(loc=0, scale=1. / np.sqrt(alpha_), size=n_samples)\n",
    "        # Create the target\n",
    "        #y = np.dot(bf_data_train_y, w) + noise\n",
    "        relevant_features = np.random.randint(0, 7, 10)\n",
    "        relevant_features\n",
    "    else:\n",
    "        print(\"\")\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
